pipeline {
    agent any
    tools {
        maven 'M3'
    }
    environment {
        // all environment variables have the type "String" (also 'isRelease = false')
        gitCredentialsId = 'github-jenkins-ssh'
        OpenShiftProjectDev = 'axa-advice-sme-dev-axa-ch'
        OpenShiftClusterName = 'axa-advice-sme-dev-axa-ch-private-blue'
        //projects = 'application-form-domain,consultant-domain,meeting-minutes-domain,pdsdocument-domain,activity-domain,partner-domain'
    }
    parameters {
        booleanParam(
                name: 'PREPARE_RELEASE',
                description: 'Should create a new release branch and increment the version',
                defaultValue: false
        )
        string(
                name: 'DEPLOYMENT_BRANCH',
                description: 'Branch from which to trigger the deployments',
                defaultValue: env.BERATUNGS_SERVICES_MODULES_DEPLOYMENT_BRANCH ?: "development"
        )
    }
    stages {
        stage('Update versions and tag - RELEASE FIX') {
            when {
                expression { return isReleaseBranch() && !isRelease}
            }
            steps {
                script {
                    sshagent([gitCredentialsId]) {
                        sh 'mvn clean install'
                    }
                }
            }
        }

    }
    post {
        success {
            //slackSend(color: 'good', message: "Build - ${JOB_NAME} ${BUILD_NUMBER} successful. (<${BUILD_URL}|Open output>)", channel: "#jenkins-sme")
            echo 'BUILD SUCCESSFUL.'
            emailext body: 'Test Message - success', recipientProviders: [requestor()], subject: 'Test Subject', to: 'srga89@gmail.com'
        }
        failure {
            //slackSend(color: '#FF0000', message: ":warning: Build - ${JOB_NAME} ${BUILD_NUMBER} failed! (<${BUILD_URL}|Open output>) :warning:", channel: "#jenkins-sme")
            echo 'BUILD FAILED!'
            emailext body: 'Test Message - failed', recipientProviders: [requestor()], subject: 'Test Subject', to: 'srga89@gmail.com'
        }
    }
}


def run_s2i_build(domains, projectVersion) {
    def buildConfig = ["activity-domain"        : "sme-activity",
                       "application-form-domain": "sme-application-form",
                       "consultant-domain"      : "sme-consultant",
                       "meeting-minutes-domain" : "sme-meeting-minutes",
                       "partner-domain"         : "sme-partner",
                       "pdsdocument-domain"     : "sme-pdsdocument"]
    domains.each { domain ->
        openshift.withCluster(OpenShiftClusterName) {
            openshift.withProject(OpenShiftProjectDev) {
                echo "start build for ${domain}"
                def bc = openshift.selector("bc", "${buildConfig.get(domain)}")
                bc.startBuild("--from-file=${domain}/target/${domain}-${projectVersion}.jar")
                timeout(time: 4, unit: 'MINUTES') {
                    bc.logs('-f')
                }
                def lastVersion = bc.object().status.lastVersion
                def pod = openshift.selector('pod', "${buildConfig.get(domain)}-${lastVersion}-build")
                def status = waitForTermination(pod)
                if (status == 'Failed') {
                    error('build failed')
                }
                echo "tagging ${buildConfig.get(domain)}:latest -> ${buildConfig.get(domain)}:${projectVersion}"
                openshift.tag("${buildConfig.get(domain)}:latest", "${buildConfig.get(domain)}:${projectVersion}")
            }
        }
    }
}
/**
 * returns true, if the last commit was created by a release build (i.e. contains "maven-release-plugin")
 */
def wasLastCommitAutomated() {
    def lastCommit = sh returnStdout: true, script: 'git log -1 --pretty=%B'
    echo "lastCommit=${lastCommit}"

    if (params.PREPARE_RELEASE) {
        return false
    }

    return lastCommit.contains("[maven-release-plugin]") || lastCommit.contains("[automated-commit]")
}
/**
 * returns true, if this build is our multibranch pipeline + branch to be built is "development"
 */
def isDevelopmentBranchInMultibranchPipeline() {
    // in a multibranch pipeline build, the JOB_NAME follows the pattern "JOB_NAME"/"BRANCH_NAME"
    // in a simple pipeline, it is ["FOLDER_NAME"/]"JOB_NAME"
    return env.JOB_NAME.endsWith("/develop")
}
/**
 * returns true, if this build is our multibranch pipeline
 */
def isMultibranchPipeline() {
    // in a multibranch pipeline build, the GIT_BRANCH just contains the branch name
    // in a simple pipeline, it is "origin/branch-name"
    return !GIT_BRANCH.startsWith("origin/")
}
/**
 * returns true, if this build is our multibranch pipeline
 */
def isReleaseBranch() {
    // in a multibranch pipeline build, the GIT_BRANCH just contains the branch name
    // in a simple pipeline, it is "origin/branch-name"
    return GIT_BRANCH.startsWith("release/")
}
// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom() {
    def pom = readMavenPom file: 'pom.xml'
    return pom.version
}

def getReleaseVersion(releaseFile) {
    def props = readProperties file: releaseFile
    return props['project.rel.com.axa.ch.bers:beratungs-services']
}
/**
 * returns true, if this build is development branch
 */
def isDevelopmentBranch() {
    return JOB_NAME.endsWith("/develop")
}

def shouldDeploy() {
    if (params.PREPARE_RELEASE) {
        return false;
    }
    if (params.DEPLOYMENT_BRANCH == "development" && isDevelopmentBranch()) {
        return true
    }
    return params.DEPLOYMENT_BRANCH == GIT_BRANCH && isReleaseBranch()
}